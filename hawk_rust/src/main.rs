use keygen::hawkkeygen;
use sign::hawksign;
use verify::hawkverify;

use codec::*;

// simple rng library
use rand::prelude::*;

use std::time::{Duration, Instant};

mod cdt;
mod codec;
mod compress;
mod decompress;
mod fft;
mod fft_constants;
mod grutils;
mod keygen;
mod ntru_solve;
mod ntt;
mod params;
mod rngcontext;
// mod rngcontext_old;
mod sign;
mod utils;
mod verify;
mod verifyutils;

// memory measurement
use peak_alloc::PeakAlloc;

#[global_allocator]
static PEAK_ALLOC: PeakAlloc = PeakAlloc;
/*
   Driver code for HAWK implementation.

   Integer types:
   n: 256-1024, use u16,
   log n: 8-10, use u8,
   vectors of bits: 0/1, use u8,
   vectors f and g: initially low numbers, but is changed fast.
       set as Vec<i64>, will have negative values

*/

fn main() {
    test1();
}

fn test1() {

    let logn = 8;

    let init_seed: [u8;10] = [1,2,3,4,5,6,7,8,9,10];
    let keypair = hawkkeygen(logn, &init_seed);
    let (privkey, pubkey) = keypair;

    let message: [u8; 128] = [172, 183, 40, 151, 55, 213, 185, 23, 170, 106, 60, 158, 95, 221, 248, 250, 64, 18, 109, 82, 232, 99, 147, 120, 63, 152, 86, 97, 234, 94, 148, 47, 11, 92, 187, 87, 83, 250, 174, 232, 234, 161, 100, 103, 226, 82, 63, 125, 35, 54, 65, 221, 167, 172, 89, 33, 209, 213, 170, 148, 182, 187, 74, 182, 246, 1, 32, 194, 132, 50, 217, 36, 17, 247, 14, 159, 250, 218, 15, 192, 143, 92, 246, 195, 244, 216, 0, 114, 227, 246, 191, 87, 200, 78, 254, 110, 110, 108, 216, 50, 189, 2, 78, 46, 228, 21, 198, 166, 192, 188, 24, 122, 187, 30, 100, 191, 161, 101, 22, 3, 145, 87, 142, 174, 43, 100, 175, 50];

    let signature = hawksign(logn, &privkey, &message);

    let verify = hawkverify(logn, &message, &pubkey, &signature);
    println!("verify: {}", verify);

    // let privkey: Vec<u8> = vec![100, 208, 58, 183, 169, 58, 86, 182, 30, 235, 184, 171, 51, 14, 36, 97, 242, 195, 151, 153, 101, 148, 85, 44, 198, 140, 35, 103, 2, 128, 229, 245, 3, 206, 253, 50, 241, 110, 250, 222, 69, 47, 139, 90, 49, 18, 215, 206, 148, 189, 251, 119, 200, 25, 56, 54, 138, 174, 39, 186, 210, 104, 136, 155, 164, 95, 129, 102, 195, 55, 109, 134, 199, 53, 38, 116, 81, 170, 253, 178, 149, 93, 84, 134, 242, 88, 234, 217, 109, 207, 200, 244, 117, 136, 21, 59];
    // let pubkey: Vec<u8> = vec![180, 14, 128, 157, 12, 155, 164, 148, 134, 123, 46, 179, 246, 116, 109, 162, 100, 133, 83, 151, 40, 31, 44, 247, 21, 8, 79, 236, 137, 125, 105, 48, 120, 52, 99, 223, 112, 244, 253, 52, 13, 132, 63, 244, 202, 222, 178, 60, 13, 18, 237, 117, 128, 2, 164, 106, 133, 199, 1, 7, 236, 42, 191, 134, 69, 114, 107, 30, 183, 209, 130, 217, 30, 128, 0, 16, 168, 44, 195, 64, 112, 149, 101, 52, 87, 106, 101, 10, 106, 213, 106, 32, 59, 216, 73, 41, 215, 252, 122, 253, 255, 223, 252, 252, 246, 190, 111, 255, 223, 223, 157, 215, 189, 255, 255, 23, 6, 147, 112, 120, 101, 211, 61, 190, 244, 247, 126, 214, 95, 146, 79, 23, 95, 158, 194, 182, 5, 130, 108, 208, 150, 230, 233, 181, 169, 122, 62, 246, 245, 114, 107, 94, 115, 20, 55, 22, 208, 92, 120, 244, 53, 24, 153, 10, 54, 15, 59, 125, 63, 49, 58, 2, 194, 73, 94, 219, 35, 174, 39, 96, 179, 88, 38, 151, 47, 78, 76, 81, 26, 57, 33, 189, 12, 227, 49, 64, 141, 35, 227, 104, 253, 48, 23, 226, 125, 54, 234, 68, 37, 155, 250, 147, 14, 200, 119, 93, 58, 152, 24, 185, 205, 85, 148, 39, 57, 179, 211, 192, 119, 61, 181, 102, 26, 184, 153, 157, 184, 65, 50, 148, 40, 9, 190, 190, 164, 52, 132, 174, 72, 65, 77, 108, 63, 105, 33, 131, 195, 166, 86, 85, 176, 41, 74, 27, 125, 93, 191, 155, 68, 55, 140, 121, 217, 10, 222, 202, 10, 99, 255, 110, 32, 156, 10, 156, 145, 136, 179, 66, 130, 226, 114, 124, 204, 37, 3, 131, 53, 239, 182, 41, 57, 59, 110, 174, 24, 6, 80, 13, 40, 66, 238, 113, 92, 252, 49, 17, 75, 173, 46, 66, 67, 41, 112, 124, 146, 38, 138, 72, 211, 63, 77, 180, 127, 31, 116, 102, 77, 249, 2, 32, 254, 28, 33, 187, 63, 90, 67, 5, 205, 211, 31, 87, 122, 182, 50, 4, 71, 100, 167, 54, 56, 78, 104, 149, 154, 118, 81, 119, 138, 26, 156, 12, 106, 236, 225, 5, 128, 166, 99, 149, 150, 109, 128, 131, 33, 208, 18, 243, 21, 44, 207, 204, 35, 190, 135, 51, 21, 187, 47, 135, 58, 84, 97, 166, 24, 223, 111, 109, 219, 191, 253, 190, 221, 251, 189, 126, 95, 191, 187, 255, 222, 254, 255, 255, 251, 255, 239, 172, 187, 245, 86, 223, 251, 255, 86, 255, 222, 255, 255, 110, 253, 254, 238, 253, 1, 0, 0, 0, 0, 0];
    // let signature: Vec<u8> = vec![244, 21, 34, 231, 19, 24, 236, 140, 243, 104, 72, 228, 242, 179, 179, 54, 116, 85, 97, 85, 212, 52, 4, 8, 19, 26, 207, 151, 100, 27, 224, 23, 64, 134, 237, 200, 157, 2, 19, 16, 168, 0, 162, 38, 241, 52, 153, 162, 211, 136, 97, 205, 197, 201, 211, 78, 87, 183, 75, 231, 32, 87, 10, 140, 78, 60, 65, 145, 4, 132, 59, 46, 74, 11, 6, 218, 226, 42, 131, 188, 138, 138, 40, 69, 50, 22, 60, 138, 36, 129, 168, 136, 214, 54, 0, 168, 241, 232, 203, 111, 6, 100, 130, 240, 154, 66, 138, 212, 80, 211, 76, 49, 36, 124, 42, 51, 198, 135, 2, 126, 224, 153, 198, 174, 1, 42, 156, 152, 113, 101, 119, 106, 68, 249, 170, 50, 98, 109, 194, 150, 203, 76, 185, 66, 198, 122, 99, 164, 4, 87, 1, 98, 55, 219, 130, 148, 2, 118, 2, 76, 209, 243, 160, 1, 36, 131, 121, 48, 150, 81, 188, 43, 217, 119, 4, 213, 66, 180, 47, 31, 30, 41, 12, 214, 0, 35, 106, 97, 80, 86, 40, 160, 196, 113, 76, 67, 254, 32, 37, 80, 71, 128, 27, 2, 86, 218, 219, 191, 255, 191, 127, 219, 109, 175, 223, 255, 199, 111, 247, 95, 255, 127, 221, 183, 255, 173, 255, 190, 251, 254, 189, 255, 191, 245, 218, 255, 223, 187, 119, 187, 190, 187, 255, 253, 109, 0, 0, 0, 0];
    //
    // let signature_r = hawksign(logn, &privkey, &message);
    // println!("r sig: {:?}", signature_r);

    // let verif_r = hawkverify(logn, &message, &pubkey, &signature_r);
    // println!("verification: {}", verif_r);
}

fn print_type_of<T>(_: &T) {
    println!("{}", std::any::type_name::<T>())
}
